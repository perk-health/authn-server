name: Release

on:
  push:
    branches: [main]

jobs:
  linux64:
    name: Compile for Linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.17
      - run: go mod download

      - name: compile
        run: |
          go build \
            -ldflags "-extldflags -static -X main.VERSION=${VERSION##*/v}" \
            -o dist/authn-linux64
        env:
          VERSION: ${{ github.ref }}
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 1

      - uses: actions/upload-artifact@v2
        with:
          name: authn-linux64
          path: dist/authn-linux64

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [linux64]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

      - name: Upload Linux64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./authn-linux64/authn-linux64
          asset_name: authn-linux64
          asset_content_type: application/octet-stream

  register:
    name: Register on AWS ECR
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Get Dockerfile
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: authn-linux64

      - run: |
          chmod a+x authn-linux64

      - name: VERSION
        id: version
        run: |
          echo "::set-output name=number::${VERSION##*/v}"
        env:
          VERSION: ${{ github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: keratin-sch
          IMAGE_TAG: latest,${{ steps.version.outputs.number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
